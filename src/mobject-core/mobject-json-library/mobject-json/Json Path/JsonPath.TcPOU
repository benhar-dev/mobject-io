<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="JsonPath" Id="{6d6b4b3c-6b09-0c93-2257-06319394a055}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK JsonPath IMPLEMENTS I_JsonPath
VAR
	jsonParser : FB_JsonDomParser;
	jsonDocument : SJsonValue;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Parse" Id="{4ace5117-5ec5-0fa4-2d83-4a5dbb901681}">
      <Declaration><![CDATA[METHOD PUBLIC Parse : I_JsonPath
VAR_INPUT
	JsonString : REFERENCE TO STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[jsonDocument := jsonParser.ParseDocument(JsonString);
Parse := this^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ParseFromHttpRequest" Id="{27be63aa-429c-0d7d-09e3-c86618af406b}">
      <Declaration><![CDATA[METHOD PUBLIC ParseFromHttpRequest : I_JsonPath
VAR_INPUT
	HttpRequest : REFERENCE TO FB_IotHttpRequest;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[jsonDocument := HttpRequest.GetJsonDomContent(jsonParser);
ParseFromHttpRequest := this^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryRead" Id="{955a5813-dff9-029e-359d-0bc82a25fe5d}">
      <Declaration><![CDATA[METHOD PUBLIC TryRead : HRESULT
VAR_INPUT
	Path : T_MaxString;
	Destination : ANY;
END_VAR
VAR
	result : HRESULT;
	jsonElement : I_JsonPathElement;
	jsonValue : SJsonValue;
	_BOOL : BOOL;
	_DINT : DINT;
	_LINT : LINT;
	_UDINT : UDINT;
	_ULINT : ULINT;
	_LREAL : LREAL;
	_STRING : POINTER TO STRING(1);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[ParseJsonPath(Path,jsonElement);

IF FAILED(result) THEN
	TryRead := result;
	RETURN;
END_IF

jsonValue := jsonElement.ResolveToSJsonValue(jsonParser,jsonDocument);
jsonElement.Release();

IF jsonValue = 0 THEN
	TryRead := NOT_FOUND;
	RETURN;
END_IF

IF jsonParser.IsBool(jsonValue) THEN
	_BOOL := jsonParser.GetBool(jsonValue);
	TryRead := Convert_BOOL_TO_(_BOOL,Destination);
	RETURN;
END_IF

IF jsonParser.IsInt(jsonValue) THEN
	_DINT := jsonParser.GetInt(jsonValue);
	TryRead := Convert_DINT_TO_(_DINT,Destination);
	RETURN;
END_IF

IF jsonParser.IsInt64(jsonValue) THEN
	_LINT := jsonParser.GetInt64(jsonValue);
	TryRead := Convert_LINT_TO_(_LINT,Destination);
	RETURN;
END_IF

IF jsonParser.IsUInt(jsonValue) THEN
	_UDINT := jsonParser.GetUInt(jsonValue);
	TryRead := Convert_UDINT_TO_(_UDINT,Destination);
	RETURN;
END_IF

IF jsonParser.IsUInt64(jsonValue) THEN
	_ULINT := jsonParser.GetUInt64(jsonValue);
	TryRead := Convert_ULINT_TO_(_ULINT,Destination);
	RETURN;
END_IF

IF jsonParser.IsDouble(jsonValue) THEN
	_LREAL := jsonParser.GetDouble(jsonValue);
	TryRead := Convert_LREAL_TO_(_LREAL,Destination);
	RETURN;
END_IF

IF jsonParser.IsString(jsonValue) AND Destination.TypeClass = __SYSTEM.TYPE_CLASS.TYPE_STRING THEN
	_STRING := Destination.pValue;
	IF (jsonParser.CopyString(jsonValue,_STRING^,Destination.diSize) > 0) THEN;
		TryRead := S_OK;
		RETURN;
	END_IF
END_IF

]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>