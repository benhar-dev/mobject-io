<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Command" Id="{d59e208f-56ea-0993-208c-31f18de59054}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK ABSTRACT Command EXTENDS Disposable IMPLEMENTS I_CyclicCalled, I_Command, I_CanReleaseWhenDone
VAR
	cyclicCall : ManualCyclicCall(THIS^);
	commandFeedback : I_CommandFeedbackReadWrite;
	commandHasCompleted : BOOL;
	disposeOnceComplete : BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Abstract" Id="{2ea3f31d-affe-0324-3d76-fa6b4866c4f9}" />
    <Folder Name="Private" Id="{0db1c8f6-f18a-0f21-2e80-98b63b3597bd}" />
    <Folder Name="Protected" Id="{9982d537-f8cd-08d9-1adc-bb2db67d50e2}" />
    <Method Name="Abort" Id="{f0425181-46d0-0740-0ddb-46e6fc86fe39}">
      <Declaration><![CDATA[METHOD PUBLIC Abort : I_CanReleaseWhenDone
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Abort := THIS^;

IF IsAborting() THEN
	RETURN;
END_IF

IF HasCompleted() THEN
	RETURN;
END_IF

commandFeedback.SetAborting();

OnAbort(commandFeedback);

IF HasCompleted() THEN
	DisableCyclicCalling();
	CompleteTheCommand();
	RETURN;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ClearFeedback" Id="{cbcfd41a-fe57-07f4-2310-d5e708960fa8}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE ClearFeedback
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[commandFeedback.Release();
commandFeedback := 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteTheCommand" Id="{af9a6c1b-9fb0-006b-0894-72dc8b5c918d}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CompleteTheCommand
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ClearFeedback();

IF disposeOnceComplete THEN
	DisposeCommand();	
END_IF

OnExecuteComplete();

commandHasCompleted := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicCall" Id="{eda9c96d-7b39-087b-2e39-c10c5e371001}">
      <Declaration><![CDATA[METHOD PUBLIC CyclicCall
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF IsStillBusyExecuting() THEN
	WhileBusy(commandFeedback);
END_IF

IF IsAborting() THEN
	WhileAborting(commandFeedback);
END_IF

IF NOT HasCompleted() THEN 
	RETURN;
END_IF

DisableCyclicCalling();
CompleteTheCommand();]]></ST>
      </Implementation>
    </Method>
    <Method Name="DisableCyclicCalling" Id="{1e759228-2c15-02bf-308e-ebfb5bc65b59}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE DisableCyclicCalling]]></Declaration>
      <Implementation>
        <ST><![CDATA[cyclicCall.Disable();]]></ST>
      </Implementation>
    </Method>
    <Method Name="DisposeCommand" Id="{0624dc42-8a43-051c-057a-3d7d5394ca1c}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE DisposeCommand
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[disposeOnceComplete := FALSE;

SUPER^.OnDispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="EnableCyclicCalling" Id="{eca93c80-aa17-0b5a-3869-da38bf61fd7d}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE EnableCyclicCalling]]></Declaration>
      <Implementation>
        <ST><![CDATA[cyclicCall.Enable();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Execute" Id="{b4b4da2b-f51c-008f-2c93-6c0e41d5415e}">
      <Declaration><![CDATA[METHOD PUBLIC Execute : I_CanReleaseWhenDone
VAR_INPUT
	Feedback : REFERENCE TO I_CommandFeedback;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Execute := THIS^;

IF feedback <> 0 THEN 
	feedback.Release();
END_IF

IF IsAlreadyExecuting() THEN

	IF __ISVALIDREF(feedback) THEN
		feedback := commandFeedback;
		feedback.AddReference();
	END_IF
	
	RETURN;
	
END_IF

IF commandFeedback <> 0 THEN 
	commandFeedback.Release();
END_IF

commandFeedback := GetCustomFeedback();

IF commandFeedback = 0 THEN
	commandFeedback := GetStandardFeedback();
END_IF

IF __ISVALIDREF(feedback) THEN
	feedback := commandFeedback;
	feedback.AddReference();
END_IF

commandFeedback.SetBusy();

OnExecute(commandFeedback);

IF HasCompleted() THEN
	CompleteTheCommand();
	RETURN;
END_IF

EnableCyclicCalling();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetCustomFeedback" Id="{0716b654-833d-043c-262f-60fb725ced7b}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED GetCustomFeedback : I_CommandFeedbackReadWrite
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetStandardFeedback" Id="{6559f55f-4a53-0bea-3120-3effa8c051d2}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PROTECTED GetStandardFeedback : I_CommandFeedbackReadWrite
VAR
	feedback : POINTER TO CommandFeedback;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[feedback := __NEW(CommandFeedback);
GetStandardFeedback := feedback^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="HasCompleted" Id="{c7c8d477-2c9a-0be8-31d4-76637d4f12a2}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE HasCompleted : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF commandFeedback = 0 THEN
	HasCompleted := commandHasCompleted;
	RETURN;
END_IF

HasCompleted := not commandFeedback.Busy;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsAborting" Id="{128135d1-eca5-0e57-1504-0b9c6877f0eb}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE IsAborting : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF commandFeedback = 0 THEN
	RETURN;
END_IF

IsAborting := commandFeedback.Aborting;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsAlreadyExecuting" Id="{be6a080e-96b4-0517-3547-e316e5ed6959}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE IsAlreadyExecuting : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF commandFeedback = 0 THEN
	RETURN;
END_IF

IsAlreadyExecuting := commandFeedback.Busy;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsStillBusyExecuting" Id="{25fa9f0f-be12-0b86-01c9-ed090d2081fc}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE IsStillBusyExecuting : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF commandFeedback = 0 THEN
	RETURN;
END_IF

IsStillBusyExecuting := commandFeedback.Busy and not commandFeedback.Aborting;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAbort" Id="{d3a70f43-d770-0412-12ac-9940fbedf41b}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED OnAbort
VAR_INPUT
	CommandState : I_CommandAbortingState;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// override this method when a command needs time to "abort".
// if your aborting code take more than one cycle to completed then do not SetAborted() here, rather use SetAborted inside WhileAborting.
CommandState.SetAborted();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnDispose" Id="{cf1f101a-57a3-09ff-3070-6654ef1ecd56}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED OnDispose
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF IsAlreadyExecuting() THEN 
	disposeOnceComplete := TRUE;
	Abort();
	RETURN;	
END_IF

DisposeCommand();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{de408a0d-9a1f-021c-00f8-a6bd26b8ee50}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED OnExecute
VAR_INPUT
	CommandState : I_CommandBusyState;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecuteComplete" Id="{d0c1cdf0-a9dd-0867-0bfc-7f74b69fbc3a}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED OnExecuteComplete
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="ThenRelease" Id="{61a1d33c-23ba-076d-1ef5-9f466ce5af27}">
      <Declaration><![CDATA[METHOD PUBLIC ThenRelease
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF HasCompleted() THEN
	DisposeCommand();
	RETURN;
END_IF

disposeOnceComplete := true;]]></ST>
      </Implementation>
    </Method>
    <Method Name="WhileAborting" Id="{5e832f2b-c866-076d-088b-b2bd6f0c0d99}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED WhileAborting
VAR_INPUT
	CommandState : I_CommandAbortingState;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// you must override both OnAbort and WhileAborting to use this method.
// if SetAborted has not been called during OnAbort then this method will be cyclically called until you do;
CommandState.SetAborted();]]></ST>
      </Implementation>
    </Method>
    <Method Name="WhileBusy" Id="{fb860325-57a2-0fc9-2a9a-9ca0d9cf6ebc}" FolderPath="Abstract\">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT WhileBusy
VAR_INPUT
	CommandState : I_CommandBusyState;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// This will be called cyclically until the command has finished executing.  
// once done use the command below to complete the execute state.
//commandState.SetDone();

// use SetError to cancel the command.
//CommandState.SetError(ErrorID:=0);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>