<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="SynchronousCommand" Id="{7933fc53-0bdf-4661-ad67-064c255651ac}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'}
{attribute 'no_explicit_call' := 'do not call this POU directly'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK ABSTRACT SynchronousCommand EXTENDS Disposable IMPLEMENTS I_Command, I_CanReleaseWhenDone
VAR
	commandFeedback : I_CommandFeedbackReadWrite;
	commandHasCompleted : BOOL;
	disposeOnceComplete : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Abstract" Id="{ebbeac00-4ca1-47a4-8734-e2237b5a0ef7}" />
    <Folder Name="Private" Id="{f6fd746e-c6dd-40a9-88db-7e681233827b}" />
    <Folder Name="Protected" Id="{95d312c1-d8a7-42dd-9b01-40e6e9d3c192}" />
    <Method Name="Abort" Id="{b2e517b9-7919-465e-971d-7a67b23f060e}">
      <Declaration><![CDATA[METHOD PUBLIC Abort : I_CanReleaseWhenDone
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Abort := THIS^;

// not possible to abort an synchonous command as the code is immediatly called in Execute()]]></ST>
      </Implementation>
    </Method>
    <Method Name="ClearFeedback" Id="{aef66ec8-28f2-4bcc-b7fc-74176c03f424}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE ClearFeedback
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[commandFeedback.Release();
commandFeedback := 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteTheCommand" Id="{2ab9ec8d-758d-4fc1-a3dc-1b9d9546fa47}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CompleteTheCommand
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ClearFeedback();

IF disposeOnceComplete THEN
	DisposeCommand();	
END_IF

OnExecuteComplete();

commandHasCompleted := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="DisposeCommand" Id="{ae84a559-cee0-4b22-9f34-86ac71972e05}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE DisposeCommand
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[disposeOnceComplete := FALSE;

SUPER^.OnDispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Execute" Id="{612fe777-3f85-448c-8eb4-857e8d26ae95}">
      <Declaration><![CDATA[METHOD PUBLIC Execute : I_CanReleaseWhenDone
VAR_INPUT
	Feedback : REFERENCE TO I_CommandFeedback;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Execute := THIS^;

IF Feedback <> 0 THEN 
	Feedback.Release();
END_IF

IF commandFeedback <> 0 THEN 
	commandFeedback.Release();
END_IF

commandFeedback := GetCustomFeedback();

IF commandFeedback = 0 THEN
	commandFeedback := GetStandardFeedback();
END_IF

IF __ISVALIDREF(feedback) THEN
	feedback := commandFeedback;
	feedback.AddReference();
END_IF

commandFeedback.SetBusy();

OnExecute(commandFeedback);

IF commandFeedback.Busy THEN
	commandFeedback.SetDone();
END_IF

CompleteTheCommand();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetCustomFeedback" Id="{880c121d-5914-4f5c-b525-ec135dd51fae}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED GetCustomFeedback : I_CommandFeedbackReadWrite
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetStandardFeedback" Id="{3f6d4f4b-c942-4c66-ac88-3b4cf21b3e2e}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PROTECTED GetStandardFeedback : I_CommandFeedbackReadWrite
VAR
	feedback : POINTER TO CommandFeedback;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[feedback := __NEW(CommandFeedback);
GetStandardFeedback := feedback^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="HasCompleted" Id="{7bdf0626-a72a-4eab-b9ab-4f7c588200c9}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE HasCompleted : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF commandFeedback = 0 THEN
	HasCompleted := commandHasCompleted;
	RETURN;
END_IF

HasCompleted := not commandFeedback.Busy;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnDispose" Id="{7c3438bd-aece-480b-aa00-d9ad5d1f05fe}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED OnDispose
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF commandFeedback <> 0 THEN 
	commandFeedback.Release();
END_IF

SUPER^.OnDispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{c9ca19ff-2ba5-4f6f-acc3-d35fa83ce1a8}" FolderPath="Abstract\">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT OnExecute
VAR_INPUT
	CommandState : I_SynchronousCommandBusyState;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecuteComplete" Id="{9307a48a-721e-4a56-bffc-c5c107781536}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED OnExecuteComplete
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="ThenRelease" Id="{241aa47a-5d32-4aea-b3d7-450cff072d65}">
      <Declaration><![CDATA[METHOD PUBLIC ThenRelease
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF HasCompleted() THEN
	DisposeCommand();
	RETURN;
END_IF

disposeOnceComplete := true;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>