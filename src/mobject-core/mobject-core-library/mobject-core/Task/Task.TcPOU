<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Task" Id="{a313a60b-6355-0581-1057-7829d326e0ff}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Task EXTENDS Instance IMPLEMENTS I_Task
VAR
	cyclicCallEvent : TaskCyclicEvent(THIS^); 
	globalInstanceMembers : GlobalInstanceMembers;
	registerInstanceToTask: RegisterInstanceToTaskCallback(Task := THIS^);
	deregisterInstanceFromTask : DeregisterInstanceFromTaskCallback(Task := THIS^);
	registerExistingInstancesToTask : RegisterInstancesToTaskVisitor(Task := THIS^);
	taskIndex : DINT;
	taskInfo : PlcTaskSystemInfo;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{1044cc41-2ebe-0834-26dc-5d0c4b8f567f}" />
    <Folder Name="Destructor" Id="{e545fdbe-3f2d-0bff-0b27-371f4db7b6a2}" />
    <Folder Name="Internal" Id="{98fa42d9-a146-0f90-212d-bd4d25de07bd}" />
    <Folder Name="Protected" Id="{eb44ade4-2e13-02e6-2347-d442185c2908}" />
    <Method Name="CyclicCall" Id="{c5e13f4f-8a32-0c1e-3353-6132ddafeaa4}">
      <Declaration><![CDATA[METHOD PUBLIC CyclicCall
]]></Declaration>
      <Implementation>
        <ST><![CDATA[UpdateTaskInformation();
cyclicCallEvent.Notify();]]></ST>
      </Implementation>
    </Method>
    <Method Name="DeregisterInstance" Id="{d1d62bdd-443c-03ab-17f1-39e83986f06c}">
      <Declaration><![CDATA[METHOD PUBLIC DeregisterInstance
VAR_INPUT
	Instance : I_Instance;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[DeregisterInstanceIfAutomaticallyCyclicCalled(Instance);]]></ST>
      </Implementation>
    </Method>
    <Method Name="DeregisterInstanceIfAutomaticallyCyclicCalled" Id="{af8f543e-b5f7-0017-28da-51c3293de65f}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED DeregisterInstanceIfAutomaticallyCyclicCalled
VAR_INPUT
	Instance : I_Instance;
END_VAR
VAR
	cyclicInstance : I_CyclicInstance;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT __QUERYINTERFACE(Instance,cyclicInstance) THEN
	RETURN;
END_IF;

cyclicCallEvent.RemoveSubscriber(cyclicInstance.CyclicInstanceCallback);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{38612e01-c01f-0829-2b9c-40d8c5f592d6}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[globalInstanceMembers.OnInstanceAdded.RemoveSubscriber(registerInstanceToTask);
globalInstanceMembers.OnInstanceRemoved.RemoveSubscriber(deregisterInstanceFromTask);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{468d9710-6b2e-0000-3433-4cc917c3fa7b}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[globalInstanceMembers.ForEachInstance(registerExistingInstancesToTask);
globalInstanceMembers.OnInstanceAdded.AddSubscriber(RegisterInstanceToTask);
globalInstanceMembers.OnInstanceRemoved.AddSubscriber(DeregisterInstanceFromTask);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Index" Id="{6e4a6873-e85d-0b6f-291b-0c76da7823a5}">
      <Declaration><![CDATA[PROPERTY PUBLIC Index : DINT]]></Declaration>
      <Get Name="Get" Id="{5f3ad478-b1eb-0b38-2a26-a0cfe1bfb730}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Index := taskIndex;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Info" Id="{b966ed53-478e-0580-16cf-52f0a28a878a}">
      <Declaration><![CDATA[PROPERTY Info : reference to PlcTaskSystemInfo]]></Declaration>
      <Get Name="Get" Id="{73a88a28-df82-02d9-0594-542c71cf4122}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[info ref= taskInfo;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="IsExecutingThis" Id="{d2332152-b7e8-0438-02a4-4afb56138a5f}">
      <Declaration><![CDATA[METHOD PUBLIC IsExecutingThis : BOOL
VAR_INPUT
END_VAR
VAR
	currentTaskIndex : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[currentTaskIndex := GETCURTASKINDEXEX();

IF currentTaskIndex <= 0 THEN
	RETURN;
END_IF

IsExecutingThis := currentTaskIndex = taskIndex;]]></ST>
      </Implementation>
    </Method>
    <Property Name="OnCyclicCall" Id="{8147c1c6-84ff-0a14-1d91-5eddad4c197a}">
      <Declaration><![CDATA[PROPERTY PUBLIC OnCyclicCall : I_Event]]></Declaration>
      <Get Name="Get" Id="{56622a37-e869-0c11-27fd-c373d8c19162}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[OnCyclicCall := cyclicCallEvent;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="RegisterInstance" Id="{ee3b12d0-72bb-033d-149c-00312e7afa73}">
      <Declaration><![CDATA[METHOD PUBLIC RegisterInstance
VAR_INPUT
	Instance : I_Instance;
END_VAR
VAR
	cyclicInstance : I_CyclicInstance;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[RegisterInstanceIfAutomaticallyCyclicCalled(Instance);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RegisterInstanceIfAutomaticallyCyclicCalled" Id="{adcfaa73-7ad3-0e53-2dd2-14d84be59429}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED RegisterInstanceIfAutomaticallyCyclicCalled
VAR_INPUT
	Instance : I_Instance;
END_VAR
VAR
	cyclicInstance : I_CyclicInstance;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF not __QUERYINTERFACE(Instance,cyclicInstance) THEN
	RETURN;
END_IF;

cyclicCallEvent.AddSubscriber(cyclicInstance.CyclicInstanceCallback);]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateTaskInformation" Id="{40635f40-e16c-0ff4-35a8-450480281e5b}" FolderPath="Internal\">
      <Declaration><![CDATA[METHOD INTERNAL UpdateTaskInformation]]></Declaration>
      <Implementation>
        <ST><![CDATA[taskIndex := GETCURTASKINDEXEX();
taskInfo := TwinCAT_SystemInfoVarList._TaskInfo[taskIndex];]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>