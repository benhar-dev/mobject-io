<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Collection" Id="{9220d5a8-4969-08a4-1724-7633ca12bf29}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Collection
VAR
	head : I_CollectionNode;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Destructor" Id="{8fdd593d-4b5b-0cba-142b-2136390a5ba1}" />
    <Property Name="Count" Id="{18af26e5-6368-08f4-3269-b1e13029edb8}">
      <Declaration><![CDATA[PROPERTY PUBLIC Count : UDINT]]></Declaration>
      <Get Name="Get" Id="{84d29658-765a-06de-2dbc-7bd104ca837e}">
        <Declaration><![CDATA[VAR
	currentCount : UDINT;
	currentNode : I_CollectionNode;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[currentCount := 0;
currentNode := head;

WHILE currentNode <> 0 DO
	currentNode := currentNode.Next;
	currentCount := currentCount + 1;
END_WHILE;

Count := currentCount;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_exit" Id="{a189a9f3-674e-0a1c-24b3-a20087e08971}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
VAR
	previousNode : I_CollectionNode;
	currentNode : I_CollectionNode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[currentNode := head;

WHILE currentNode <> 0 DO
	previousNode := currentNode;
	currentNode := previousNode.Next;
	
	previousNode.Destroy();
END_WHILE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetByIndex" Id="{cc839167-9497-078f-3a33-ea3196df2fb9}">
      <Declaration><![CDATA[METHOD PUBLIC GetByIndex : I_Collectable
VAR_INPUT
	Index : UDINT;
END_VAR
VAR
	currentNode : I_CollectionNode;
	counter : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF head = 0 THEN
	RETURN;
END_IF

currentNode := head;
counter := 0;

WHILE currentNode <> 0 DO
	
	IF counter = Index THEN
		GetByIndex := currentNode.Collectable;
		return;
	END_IF
	
	currentNode := currentNode.Next;
	counter := counter + 1;

END_WHILE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Insert" Id="{4338eac4-cb94-0e48-0359-63eec208e760}">
      <Declaration><![CDATA[METHOD PUBLIC Insert
VAR_INPUT
	CollectableObject : I_Collectable;
END_VAR
VAR
	last : I_CollectionNode;
	pCollectionNode : POINTER TO CollectionNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pCollectionNode := __NEW(CollectionNode(Collectable := CollectableObject)); 

IF head = 0 THEN	
	head := pCollectionNode^; 
	RETURN;
END_IF

last := head; 

WHILE last.Next <> 0 DO
	last := last.next; 
END_WHILE;
	
last.next := pCollectionNode^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Remove" Id="{7cc34ab4-f737-07df-2744-3aad61faa75d}">
      <Declaration><![CDATA[METHOD PUBLIC Remove
VAR_INPUT
	CollectableObject : I_Collectable;
END_VAR
VAR
	currentNode : I_CollectionNode;
	previousNode : I_CollectionNode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF head = 0 THEN
	RETURN;
END_IF

currentNode := head;

IF currentNode.Collectable = CollectableObject THEN
	
	head := currentNode.Next;
	currentNode.Next := 0;
	currentNode.Destroy();
	RETURN;
	
END_IF

WHILE currentNode <> 0 DO
	
	IF currentNode.Collectable = CollectableObject THEN
		EXIT;
	END_IF
	
	previousNode := currentNode;
	currentNode := currentNode.Next;

END_WHILE;

IF currentNode = 0 THEN
	RETURN;
END_IF

previousNode.Next := currentNode.Next;
currentNode.Next := 0;
currentNode.Destroy();]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveByIndex" Id="{5fddda2d-2bc3-08a7-1fc5-3303b29b003f}">
      <Declaration><![CDATA[METHOD PUBLIC RemoveByIndex
VAR_INPUT
	Index : UDINT;
END_VAR
VAR
	currentNode : I_CollectionNode;
	counter : UDINT;
	previousNode : I_CollectionNode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF head = 0 THEN
	RETURN;
END_IF

currentNode := head;

IF Index = 0 THEN
	
	head := currentNode.Next;
	currentNode.Next := 0;
	currentNode.Destroy();
	RETURN;
	
END_IF

counter := 0;

WHILE currentNode <> 0 DO
	
	IF counter = Index THEN
		EXIT;
	END_IF
	
	previousNode := currentNode;
	currentNode := currentNode.Next;
	counter := counter + 1;

END_WHILE;

IF currentNode = 0 THEN
	RETURN;
END_IF

previousNode.Next := currentNode.Next;
currentNode.Next := 0;
currentNode.Destroy();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>